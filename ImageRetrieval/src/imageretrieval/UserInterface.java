/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 * UserInterface.java
 *
 * Created on Mar 23, 2011, 12:25:54 AM
 */
package imageretrieval;

import feature.Histogram;
import feature.Feature;
import feature.FeatureFactory;
import chart.*;
import java.awt.Color;
import java.lang.Double;
import java.awt.Component;
import java.awt.FileDialog;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Random;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author nautilus
 */
public class UserInterface extends javax.swing.JFrame {

    private String datadir;
    private String imdir;
    private String imfile;
    File imsrc;
    String imDataSource = "../featureDatabase/";
    BufferedImage bfim;

    private ShowImage sourceImagePanel;

    private final int MAXHEIGHT = 130;
    private final int MAXWIDTH = 130;
    private final int PERFRAMEIMAGES = 10;
    private final int PERFRAMEROWIMAGES = 5;
    private final int NOOFIMAGES = 1000;

    private final String TYPE_PRECISION = "precision";
    private final String TYPE_PRECISION_RECALL = "precision-recall";

    Vector searchResult;
    int nowShowingOffset;

    javax.swing.ComboBoxModel featureComboBoxModel;

    /** Creates new form UserInterface */
    public UserInterface() {

        this.sourceImagePanel = new ShowImage("./","NoImage.jpg","",160);
        this.sourceImagePanel.setBounds(10, 50, 160, 160);
        this.searchResult = new Vector();
        
        initComponents();
        this.jDesktopPane1.add(sourceImagePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        this.nextButton.setEnabled(false);
        this.previousButton.setEnabled(false);

        this.featureComboBoxModel = new javax.swing.DefaultComboBoxModel(new String[] {"Histogram","Color Structure Descriptor","Color Coherence Vector"});
        this.featureComboBox.setModel(featureComboBoxModel);
        this.setLocationRelativeTo(null);

        this.imDataPath.setText("../imageDatabase");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        imDataPath = new javax.swing.JTextField();
        browseDataSource = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        featureComboBox = new javax.swing.JComboBox();
        search = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        imSourcePath = new javax.swing.JTextField();
        browseSource = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        showGraphButton = new javax.swing.JButton();
        showAvgPrecButton = new javax.swing.JButton();
        comparePrecButton = new javax.swing.JButton();
        imageResultPane = new javax.swing.JLayeredPane();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(204, 204, 204), null, null));

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 0, 18));
        jLabel1.setText("Image Retrieval Interface");
        jLabel1.setBounds(330, 10, 230, 22);
        jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane1.setBounds(0, 0, 890, 50);
        jDesktopPane1.add(jLayeredPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection Criteria"));
        imDataPath.setBounds(130, 30, 410, 30);
        jLayeredPane3.add(imDataPath, javax.swing.JLayeredPane.DEFAULT_LAYER);

        browseDataSource.setText("Browse...");
        browseDataSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDataSourceActionPerformed(evt);
            }
        });
        browseDataSource.setBounds(560, 30, 120, 29);
        jLayeredPane3.add(browseDataSource, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel2.setText("Query");
        jLabel2.setBounds(20, 73, 50, 20);
        jLayeredPane3.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        featureComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Histogram" }));
        featureComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                featureComboBoxActionPerformed(evt);
            }
        });
        featureComboBox.setBounds(130, 110, 550, 30);
        jLayeredPane3.add(featureComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.setBounds(560, 150, 120, 29);
        jLayeredPane3.add(search, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel3.setText("Feature");
        jLabel3.setBounds(20, 110, 60, 30);
        jLayeredPane3.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        imSourcePath.setBounds(130, 70, 410, 30);
        jLayeredPane3.add(imSourcePath, javax.swing.JLayeredPane.DEFAULT_LAYER);

        browseSource.setText("Browse...");
        browseSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSourceActionPerformed(evt);
            }
        });
        browseSource.setBounds(560, 70, 120, 29);
        jLayeredPane3.add(browseSource, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel4.setText("Database");
        jLabel4.setBounds(20, 30, 90, 30);
        jLayeredPane3.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        showGraphButton.setText("Precision Recall");
        showGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGraphButtonActionPerformed(evt);
            }
        });
        showGraphButton.setBounds(10, 150, 160, 29);
        jLayeredPane3.add(showGraphButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        showAvgPrecButton.setText("Avg. Precision Recall");
        showAvgPrecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAvgPrecButtonActionPerformed(evt);
            }
        });
        showAvgPrecButton.setBounds(180, 150, 180, 29);
        jLayeredPane3.add(showAvgPrecButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        comparePrecButton.setText("Compare Precision");
        comparePrecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comparePrecButtonActionPerformed(evt);
            }
        });
        comparePrecButton.setBounds(372, 150, 180, 29);
        jLayeredPane3.add(comparePrecButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBounds(180, 50, 710, 190);
        jDesktopPane1.add(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        imageResultPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Result"));
        imageResultPane.setBounds(0, 240, 890, 390);
        jDesktopPane1.add(imageResultPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });
        previousButton.setBounds(10, 640, 130, 29);
        jDesktopPane1.add(previousButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        nextButton.setBounds(760, 640, 110, 29);
        jDesktopPane1.add(nextButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseDataSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDataSourceActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (JFileChooser.APPROVE_OPTION == chooser.showDialog(null, "Select")) {
            File dir = chooser.getSelectedFile();
            this.imDataPath.setText(dir.getPath());
            //this.imDataSource = dir.getPath() + "/";
            System.out.println(dir);
        }
    }//GEN-LAST:event_browseDataSourceActionPerformed

    private void showresults(){
        this.imageResultPane.removeAll();

        int numResults = 0;
        if(this.searchResult.size()-this.nowShowingOffset <= this.PERFRAMEIMAGES){
            numResults = this.searchResult.size()-this.nowShowingOffset;
            this.nextButton.setEnabled(false);
        }else{
            numResults = this.PERFRAMEIMAGES;
            this.nextButton.setEnabled(true);
        }
        //System.out.println("Showing results: "+this.nowShowingOffset+" to "+(this.nowShowingOffset+numResults-1));
        int depth = 0;
        int padding = 40;
        for(int i=this.nowShowingOffset;i<this.nowShowingOffset+numResults;i++){
            //System.out.println("i: "+i+" depth: "+depth);
            int x = ((i-this.nowShowingOffset)%PERFRAMEROWIMAGES)*(this.MAXHEIGHT+padding);
            int y = depth*(this.MAXHEIGHT+padding);
            String d = Double.toString(((MatchedImage)this.searchResult.get(i)).getDistance());
            MatchedImage mi = ((MatchedImage)this.searchResult.get(i));
            ShowImage newPanel = new ShowImage(this.imDataPath.getText()+"/", mi.getImage(),d,this.MAXHEIGHT);
            newPanel.setBounds(x+padding, y+padding, this.MAXHEIGHT, this.MAXHEIGHT+30);
            newPanel.setBackground(Color.lightGray);
            this.imageResultPane.add(newPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

            if(i%PERFRAMEROWIMAGES == PERFRAMEROWIMAGES-1) depth++;
        }

        if(this.nowShowingOffset == 0) this.previousButton.setEnabled(false);
        else    this.previousButton.setEnabled(true);
    }

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        if(this.searchResult.isEmpty() == false)   this.searchResult.clear();

        try {
            FeatureFactory ff = new FeatureFactory();
            Feature f = ff.getFeature(this.featureComboBox.getSelectedItem().toString());
            f.loadDatabase(imDataSource);
            this.searchResult = f.searchImage(imfile);
            this.nowShowingOffset = 0;
            this.showresults();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_searchActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        // TODO add your handling code here:
        this.nowShowingOffset -= this.PERFRAMEIMAGES;
        this.showresults();
    }//GEN-LAST:event_previousButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        this.nowShowingOffset += this.PERFRAMEIMAGES;
        this.showresults();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void browseSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSourceActionPerformed
        // TODO add your handling code here:
        FileDialog fd = new FileDialog(this);
        fd.setDirectory("../imageDatbase");
        fd.setVisible(true);
        imdir = fd.getDirectory();
        imfile = fd.getFile();
        this.imSourcePath.setText(imdir+imfile);
        jDesktopPane1.remove(sourceImagePanel);
        sourceImagePanel = new ShowImage(imdir,imfile,"",160);
        sourceImagePanel.setBounds(10, 50, 160, 160);
        jDesktopPane1.add(sourceImagePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
    }//GEN-LAST:event_browseSourceActionPerformed

    private void featureComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_featureComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_featureComboBoxActionPerformed

    int getRelevantCount(String qImage, int numberOfImages, Vector<MatchedImage>searchResult){
        //System.out.println(qImage);
        StringTokenizer st = new StringTokenizer(qImage,".");
        int qc = (Integer.parseInt(st.nextToken())-1)/100;
        int count = 0;
        for(int i=0;i<numberOfImages;i++){
            MatchedImage mi = searchResult.get(i);
            st = new StringTokenizer(mi.getImage(),".");
            int ic = (Integer.parseInt(st.nextToken())-1)/100;

            if(qc == ic) count++;
        }
        return count;
    }

    private Vector<XYData> getPrecisionRecallData(String imageName, Vector<MatchedImage> searchResult){
        Vector<XYData> data = new Vector<XYData>();

        StringTokenizer st = new StringTokenizer(imageName,".");
        int qImNo = Integer.parseInt(st.nextToken());
        int ImRangeStart=((qImNo-1)/100)*100+1;

        int count=0, i=0;
        for(i=0;count<=100 && i<this.NOOFIMAGES;i++){
            st = new StringTokenizer(searchResult.get(i).getImage(),".");
            int imNo = Integer.parseInt(st.nextToken());

            if(imNo>=ImRangeStart && imNo<ImRangeStart+100){
                count++;
                //System.out.println("count: "+count+" #: "+(i+1));
                if(count%10==0){

                    data.add(new XYData(count/100.0,count/((i+1)*1.0)));
                }
            }
        }
        //System.out.println(" #: "+(i+1));
        return data;
    }

    private void showRecallPrecisionGraph(){

        XYDataSet dataSet = new XYDataSet();
        dataSet.setTitle("Precision - Recall");
        Vector<XYData> data = this.getPrecisionRecallData(this.imfile, this.searchResult);
        dataSet.setData(data);
        Vector<XYDataSet> dataCol = new Vector<XYDataSet>();
        dataCol.add(dataSet);
        CreateChart cc = new CreateChart(dataCol, "","","Recall","Precision");
    }

    private void showGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGraphButtonActionPerformed
        // TODO add your handling code here
        showRecallPrecisionGraph();

        /*XYDataSet dataSet = new XYDataSet();
        dataSet.setTitle("Precision - Number of Retrieval");
        Vector<XYData> data = new Vector<XYData>();
        for(int i=10;i<=100;i+=10){
            data.add(new XYData(i,this.getRelevantCount(this.imfile, i,(Vector<MatchedImage>)this.searchResult)/(i*1.0)));
        }
        dataSet.setData(data);
        Vector<XYDataSet> dataCol = new Vector<XYDataSet>();
        dataCol.add(dataSet);
        CreateChart cc = new CreateChart(dataCol, "","","Number of retrieval","Precision");
         * */
    }//GEN-LAST:event_showGraphButtonActionPerformed


    private XYDataSet generateAverageData(Feature f, String graphType, String title) {
        int numRandomImage = 100;

        Vector imageData= new Vector();
        Vector<String>imageName=new Vector<String>();
        int i,j;
        try{
            Scanner scn = new Scanner(new FileInputStream(this.imDataSource+"rand100.csv"));
            StringTokenizer st = new StringTokenizer(scn.nextLine(),",");
            f.loadDatabase(imDataSource);
            for(i=0;i<numRandomImage;i++){
                imageName.add(st.nextToken());
            }

            System.out.println(i);

            Vector<XYData> averagePrecision = new Vector<XYData>();
            for (i = 1; i <= 10; i++) {
                averagePrecision.add(new XYData(i / 10.0, 0.0));
            }

            for (i = 0; i < numRandomImage; i++) {
                Vector<MatchedImage> searchResult = f.searchImage(imageName.get(i));
                Vector<XYData> recallData = this.getPrecisionRecallData(imageName.get(i), searchResult);
                for (j = 0; j < 10; j++) {
                    averagePrecision.get(j).setyCord(averagePrecision.get(j).getyCord() + recallData.get(j).getyCord());
                }
            }

            for (j = 0; j < 10; j++) {
                averagePrecision.get(j).setyCord(averagePrecision.get(j).getyCord() / numRandomImage);
            }

            XYDataSet dataSet = new XYDataSet();
            dataSet.setTitle(title);
            dataSet.setData(averagePrecision);
            
            return dataSet;
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }
        
        
/*
        for(i=10;i<=100;i+=10){
            int sum=0;
            for(j=0;j<numRandomImage;j++){

                sum+=this.getRelevantCount(imageName.get(j), i,(Vector<MatchedImage>)imageData.get(j));
            }
            averagePrecision.add(sum/(i*numRandomImage*1.0));
        }
  */
        
        
    }
        
    
    
    private void comparePrecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comparePrecButtonActionPerformed
        // TODO add your handling code here:
        XYDataSet dataSet = new XYDataSet();
        try {
            Vector<XYDataSet> dataCol = new Vector<XYDataSet>();
            
            FeatureFactory ff = new FeatureFactory();
            Feature f = ff.getFeature("Histogram");
            dataSet=generateAverageData(f,this.TYPE_PRECISION_RECALL,"Histogram");
            dataCol.add(dataSet);
            
            f = ff.getFeature("Color Structure Descriptor");
            dataSet=generateAverageData(f,this.TYPE_PRECISION_RECALL,"Color Structure Descriptor");
            dataCol.add(dataSet);
            
            f = ff.getFeature("Color Coherence Vector");
            dataSet=generateAverageData(f,this.TYPE_PRECISION_RECALL,"Color Coherence Vector");
            dataCol.add(dataSet);
            
            CreateChart cc = new CreateChart(dataCol, "","","Number of retrieval","Precision");
        }catch(Exception Ex){
            Ex.printStackTrace();
        }
    }//GEN-LAST:event_comparePrecButtonActionPerformed

    private void showAvgPrecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAvgPrecButtonActionPerformed
        // TODO add your handling code here:
        XYDataSet dataSet = new XYDataSet();
        try {
            FeatureFactory ff = new FeatureFactory();
            String title=this.featureComboBox.getSelectedItem().toString();
            Feature f = ff.getFeature(title);
            dataSet = generateAverageData(f,this.TYPE_PRECISION_RECALL,title);
            Vector<XYDataSet> dataCol = new Vector<XYDataSet>();
            dataCol.add(dataSet);
            CreateChart cc = new CreateChart(dataCol, "","","Recall","Precision");
        }catch(Exception Ex){
            Ex.printStackTrace();
        }
        
    }//GEN-LAST:event_showAvgPrecButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseDataSource;
    private javax.swing.JButton browseSource;
    private javax.swing.JButton comparePrecButton;
    private javax.swing.JComboBox featureComboBox;
    private javax.swing.JTextField imDataPath;
    private javax.swing.JTextField imSourcePath;
    private javax.swing.JLayeredPane imageResultPane;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton search;
    private javax.swing.JButton showAvgPrecButton;
    private javax.swing.JButton showGraphButton;
    // End of variables declaration//GEN-END:variables

}

